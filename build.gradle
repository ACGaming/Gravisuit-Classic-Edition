buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.0"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "${mod_version}"
group = "trinsdar.gravisuit" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "gravisuit"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace "@VERSION@", project.version
    replaceIn "GravisuitClassic.java"
}

repositories{
    maven { // Tech Reborn
        name 'Tech Reborn'
        url 'https://maven.modmuss50.me/'
    }
    maven { // Buildcraft
        name 'buildcraft'
        url 'https://mod-buildcraft.com/maven/'
    }
    maven { // CCL, CCC, NEI
        name 'Chickenbones Repo'
        url 'http://chickenbones.net/maven/'
    }

    maven { // The One Probe, EnderIO, EnderCore
        name 'tterrag'
        url 'http://maven.tterrag.com/'
    }
    maven { // CoFH
        name 'Covers Maven'
        url 'http://maven.covers1624.net/'
    }
    maven { // McJtyLib
        url "http://modmaven.k-4u.nl"
    }
    maven { // JEI
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven/'
    }
}

dependencies {
    deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}:api"
    runtime "mezz.jei:jei_${mc_version}:${jei_version}"
    deobfProvided("RebornCore:RebornCore-${mc_version}:${reborn_core_version}:universal") {
        transitive = false
    }
    runtime("RebornCore:RebornCore-${mc_version}:${reborn_core_version}:universal") {
        transitive = false
    }
    runtime("TechReborn:TechReborn-${mc_version}:${tech_reborn_version}:universal") {
        transitive = false
    }
    runtime("TechReborn:TechReborn-ModCompatibility-${mc_version}:${tr_modcompatibility_version}:universal") {
        transitive = false
    }
    deobfProvided "com.mod-buildcraft:buildcraft-api:7.99.12"
    runtime "com.mod-buildcraft:buildcraft:7.99.12"
    deobfProvided ("mrtjp:ProjectRed:${mc_version}-4.9.3.118:all") {
        transitive = false
    }
//    runtime ("mrtjp:MrTJPCore:${mc_version}-2.1.3.35:universal") {
//        transitive = false
//    }
//    runtime ("codechicken:CodeChickenLib:${mc_version}-3.2.2.353:universal") {
//        transitive = false
//    }
//    runtime ("codechicken:ForgeMultipart:${mc_version}-2.6.1.81:universal") {
//        transitive = false
//    }
    deobfProvided ("cofh:CoFHCore:${mc_version}-${cofhcore_version}:universal") {
        exclude group: 'mezz.jei'
    }
//    runtime ("cofh:CoFHCore:${mc_version}-${cofhcore_version}:universal") {
//        exclude group: 'mezz.jei'
//    }
//    runtime ("cofh:RedstoneFlux:1.12-2.1.0.7:universal") {
//        exclude group: 'mezz.jei'
//    }
//    runtime ("cofh:CoFHWorld:${mc_version}-${cofhworld_version}:universal") {
//        exclude group: 'mezz.jei'
//    }
//    runtime ("cofh:ThermalFoundation:${mc_version}-${thermal_foundation_version}:universal") {
//        exclude group: 'cofh'
//        exclude group: 'mezz.jei'
//    }
//    runtime ("cofh:ThermalExpansion:${mc_version}-${thermal_expansion_version}:universal") {
//        exclude group: 'codechicken'
//        exclude group: 'cofh'
//        exclude group: 'mezz.jei'
//    }
    compile 'org.jetbrains:annotations:16.0.2'

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
